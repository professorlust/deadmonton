{
  "name": "grunt-apps-c",
  "version": "0.1.3",
  "description": "CoffeeScript, JavaScript, Eco in CommonJS/1.1 Modules",
  "dependencies": {
    "lodash": "~2.2.1",
    "async": "~0.2.9",
    "glob": "~3.2.6",
    "coffee-script": "1.6.3",
    "eco": "~1.1.0-rc-3"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "mocha": "~1.12.0",
    "proxyquire": "~0.5.1",
    "grunt-verbosity": "~0.2.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "main": "Gruntfile.coffee",
  "repository": {
    "type": "git",
    "url": "git@github.com:radekstepan/grunt-apps-c.git"
  },
  "keywords": [
    "gruntplugin"
  ],
  "author": {
    "name": "Radek",
    "email": "rs676@cam.ac.uk"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha --compilers coffee:coffee-script --reporter spec --ui exports --bail --slow 500"
  },
  "readme": "#grunt-apps-c\n\nCoffeeScript, JavaScript, Eco in CommonJS/1.1 Modules. AMD/CommonJS/window external interface.\n\n[ ![Codeship Status for radekstepan/grunt-apps-c](https://www.codeship.io/projects/7c42c200-2543-0131-75e4-3aa0f2c98596/status?branch=master)](https://www.codeship.io/projects/8915)\n\n##Quick start\n\nExample `Gruntfile`:\n\n```coffeescript\nmodule.exports = (grunt) ->\n    grunt.initConfig\n        pkg: grunt.file.readJSON(\"package.json\")\n        \n        apps_c:\n            commonjs:\n                src: [ 'src/**/*.{coffee,js,eco}' ]\n                dest: 'build/app.js'\n                options:\n                    main: 'src/index.js'\n                    name: 'MyApp'\n\n    grunt.loadNpmTasks('grunt-apps-c')\n\n    grunt.registerTask('default', [ 'apps_c' ])\n\n```\n\nYou can now include the `build/app.js` file and, depending on your surrounding environment, you will be able to load it using RequireJS/AMD, CommonJS or straight from `window` under the `MyApp` key.\n\n##Config\n\nThe `options.main` property specifies which file will be considered the \"main\" one for your package. Somehow, the external world needs to know what to get when they call `require(package_name)`. If you do not specify this property the following actions are taken:\n\n1. We try make use of the property `main` as specified in your app's `package.json` file. Failing that, we...\n1. try to find the `index.[js|coffee]` file that is closest to the root of your sources.\n\nThe `options.name` overrides the name of the package in `package.json`. It specified the name of the exported package as in: `require(name)`. One can pass in an array of names, as alternatives, as well.\n\n###Eco Templates\n\nAre precompiled so when you require them, you need to only pass a `context` to them to get a string back.\n\n##CommonJS/1.1 Modules\n\nThe following template wraps your modules:\n\n```javascript\n// filename\nrequire.register('package/path.js', function(exports, require, module) {\n  // ...\n});\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/radekstepan/grunt-apps-c/issues"
  },
  "_id": "grunt-apps-c@0.1.3",
  "dist": {
    "shasum": "81e98fe9cf2758edda60e4886a4cd6e048e3576a"
  },
  "_resolved": "git://github.com/radekstepan/grunt-apps-c.git#8086efcc687fea1d01855800832343f7ba948f32",
  "_from": "grunt-apps-c@git://github.com/radekstepan/grunt-apps-c.git#master"
}
